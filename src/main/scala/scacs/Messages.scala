
package scacs

import akka.actor.Actor

/**
 * Message type used to tell the master how many nodes are expected to be registered.
 *
 * @param numNodes The number of nodes the {{MasterService}} should wait to register.
 * @param maxConumers The maximum number of consumers expected at each {{ClusterWorker}}. On each {{ClusterService}}, 1 -> maxConsumer buffers are created. 
 * @param bufferMultiplier The buffer multiplication factor. If specified, on each {{ClusterService}}, bufferMultiplier x (1 -> maxConsumer) buffers are created.  
 */
case class ClusterSize(numNodes: Int, maxConsumers: Int, bufferMultiplier: Int)

/**
 * Message type used by the {{ClusterService}} actor on each node to
 * announce itself to the {{MasterService}} actor.
 * 
 * @param hostname  The {{ClusterService}}'s host name
 * @param port      The {{ClusterService}}'s port number
 */
case class Announce(hostname: String, port: Int)

/**
 * Message type used for initializing the {{ClusterService}}
 * and starting the {{ClusterWorker}} thread.
 *
 * @param addresses a list of addresses of the remote nodes
 * @param maxConsumers The maximum number of consumers expected at each {{ClusterWorker}}. On each {{ClusterService}}, 1 -> maxConsumer buffers are created.
 * @param bufferMultiplier @param bufferMultiplier The buffer multiplication factor. If specified, on each {{ClusterService}}, bufferMultiplier x (1 -> maxConsumer) buffers are created.
 */
case class InitializeClusterService(addresses: Array[(String, Int)], maxConsumers: Int, bufferMultiplier: Int)

/**
 * Message type used by {{MasterService}} for submitting a task to a node,
 * when it expects to receive a tracking number for a processed data
 * item in return, rather than the actual data item.
 *
 * TODO: Variants of this which deal with data partitioning and/or shipping.
 *
 * @param host The hostname of the {{ClusterService}} to submit to.
 * @param port The port number of the {{ClusterService}} to submit to.
 * @param fun The function to distribute.
 * @param input The input data to distribute and process.
 * @trackingNumber The tracking number generated by {{MasterService}} to be used by {{ClusterService}} to locally store result.
 */
case class SubmitAt(host: String, port: Int,
                  fun: Any=>Any,
                  input: Any,
                  trackingNumber: Int)

/**
 * Message type used by {{MasterService}} for submitting a task to a node,
 * when it expects to receive directly receive the processed data item in return.
 *
 * TODO: Variants of this which deal with data partitioning and/or shipping.
 *
 * @param host The hostname of the {{ClusterService}} to submit to.
 * @param port The port number of the {{ClusterService}} to submit to.
 * @param fun The function to distribute.
 * @param input The input data to distribute and process.
 * @param trackingNumber The tracking number generated by {{MasterService}} to be used by {{ClusterService}} to locally store result and to keep track of results we're waiting for (future-style) at {{MasterService}}.
 */
case class InvokeAt(host: String, port: Int,
                  fun: Any=>Any,
                  input: Any,
                  trackingNumber: Int)

/**
 * Message type used by {{MasterService}} for submitting a task to a node,
 * when it expects to operate on data stored on that node via a tracking number. 
 *
 * @param host The hostname of the {{ClusterService}} to submit to.
 * @param port The port number of the {{ClusterService}} to submit to.
 * @param fun The function to distribute.
 * @param inputTrackingNumber The tracking number used by {{ClusterService}} for retrieving a local piece of data to operate on.
 * @param outputTrackingNumber The tracking number generated by {{MasterService}} to be used by {{ClusterService}} to locally store result. This is an optional. If no trackingNumber is provided, then the result placed back in the input location. 
 */
case class OperateOn(host: String, port: Int,
                  fun: Any=>Any,
                  inputTrackingNumber: Int,
                  outputTrackingNumber: Option[Int] = None)

/**
 * Message type used by {{MasterService}} for submitting a task to a node,
 * when it expects to operate on data stored on that node via a tracking number,
 * and then to retrieve that piece of data when its finished operating on it. 
 *
 * @param host The hostname of the {{ClusterService}} to submit to.
 * @param port The port number of the {{ClusterService}} to submit to.
 * @param fun The function to distribute.
 * @param inputTrackingNumber The tracking number used by {{ClusterService}} for retrieving a local piece of data to operate on.
 * @param outputTrackingNumber The tracking number used by {{MasterService}} and {{ClusterService}} for storing a piece of data on a {{ClusterService}}. 
 */
case class OperateOnAndGet(host: String, port: Int,
                  fun: Any=>Any,
                  inputTrackingNumber: Int,
                  outputTrackingNumber: Int)
                  
/**
 * Message type used by {{MasterService}} for storing a piece of data 
 * at a specific node under a tracking number. 
 *
 * @param host The hostname of the {{ClusterService}} to store data at.
 * @param port The port number of the {{ClusterService}} to store data at.
 * @param data The data to be stored at {{ClusterService}}
 * @param trackingNumber The tracking number used by {{MasterService}} and {{ClusterService}} for storing a piece of data on a {{ClusterService}}. 
 */
case class StoreAt(host: String, port: Int,
                  data: Any,
                  trackingNumber: Int)                  
                  
/**
 * Message type used by {{MasterService}} for retrieving a piece of data from a node.
 *
 * @param host The hostname of the {{ClusterService}} to submit to.
 * @param port The port number of the {{ClusterService}} to submit to.
 * @param trackingNumber The tracking number generated by {{MasterService}} to be used by {{ClusterService}} to locally store result. 
 */
case class RetrieveFrom(host: String, port: Int, trackingNumber: Int)

/**
 * Message type used by {{MasterService}} to shutdown all {{ClusterService}} nodes.
 */
case object Shutdown

/**
 * Message type used by {{ClusterWorker}} to notify its {{ClusterService}} that 
 * it has finished its task, and to return its result.
 *
 * @param trackingNumber The tracking number generated by {{MasterService}} to be used by {{ClusterService}} to locally store result.
 * @param result The result returned by the {{ClusterWorker}} at the end of the task. 
 */
case class Result(trackingNumber: Int, result: Any)

/**
 * Message type used by {{ClusterWorker}} to notify its {{ClusterService}} to 
 * perform a `putAt` on a remote {{ClusterService}}.
 *
 * @param localBufferNum The local buffer number to put `data` on.
 * @param result The data to be put into `globalBufferNum`. 
 */
case class PutAt(localBufferNum: Int, data: Any)

/**
 * Message type used by {{ClusterWorker}} to notify its {{ClusterService}} to 
 * perform a `getFrom` on a remote {{ClusterService}}.
 *
 * @param bufferIndex The local buffer number to get from.
 * @param consumderIndex The consumer number to get from. 
 */
case class GetFrom(bufferIndex: Int, consumerIndex: Int)

